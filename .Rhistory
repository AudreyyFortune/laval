install.packages("timeOmics")
install.packages("devtools")
devtools::install_github("cran/lmms")
library(lmms)
library(timeOmics)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("timeOmics")
#install.packages("devtools")
#devtools::install_github("cran/lmms")
library(lmms)
library(timeOmics)
setwd("~/Desktop/DIDEROT/Master_2/genomique/canada")
read.csv("mirna.csv", header = T)
mirna <- read.csv("mirna.csv", header = T)
mirna <- read.csv("mirna.csv", header = TRUE)
mirna <- read.table("mirna.csv", header = TRUE)
setwd("~/Desktop/DIDEROT/Master_2/genomique/canada")
mirna <- read.table("mirna.csv", header = TRUE)
mirna <- read.table(mirna.csv, header = TRUE)
mirna <- read.table("mirna.csv", header = TRUE)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("mixOmics")
library(mixOmics)
mirna <- read.table("mirna.csv", header = TRUE)
mirna <- read.table("mirna.csv", header = TRUE)
mirna <- read.csv("mirna.csv", header = TRUE)
mirna <- read.delim("mirna.csv", header = TRUE)
mirna <- read.delim("mirna.csv", header = TRUE, sep="\t")
library(mixOmics)
library(lmms)
library(timeOmics)
# install.packages("tidyverse")
library(tidyverse)
mirna <- read.delim("mirna.csv", header = TRUE)
mrna <- read.table("mrna.csv", header = TRUE)
protein <- read.table("protein.csv", header = TRUE)
sample_group <- read.table("sample_group.csv", header = TRUE)
View(mirna)
View(mirna)
mirna <- read.delim("mirna.csv", header = TRUE, sep = "\t")
mrna <- read.table("mrna.csv", header = TRUE)
protein <- read.table("protein.csv", header = TRUE)
sample_group <- read.table("sample_group.csv", header = TRUE)
View(mirna)
View(mirna)
View(mrna)
View(mirna)
mirna <- read.csv("mirna.csv", header = TRUE, sep = "\t")
mrna <- read.table("mrna.csv", header = TRUE)
protein <- read.table("protein.csv", header = TRUE)
sample_group <- read.table("sample_group.csv", header = TRUE)
View(mirna)
View(mirna)
mirna <- read.csv("mirna.csv", header = TRUE, sep = ",")
mrna <- read.table("mrna.csv", header = TRUE)
protein <- read.table("protein.csv", header = TRUE)
sample_group <- read.table("sample_group.csv", header = TRUE)
View(mirna)
mirna <- read.csv("mirna.csv", header = TRUE, sep = ",")
mrna <- read.csv("mrna.csv", header = TRUE, sep = ",")
protein <- read.csv("protein.csv", header = TRUE, sep = ",")
sample_group <- read.csv("sample_group.csv", header = TRUE, sep = ",")
View(mirna)
dim(mirna)
dim(mrna)
dim(protein)
dim(sample_group)
View(mirna)
View(mirna)
View(mrna)
View(mrna)
coeff_variation <- function(x){ #prends en entrée un vecteur
return sd(x)/mean(x)
coeff_variation <- function(x){ #prends en entrée un vecteur
return (sd(x)/mean(x))
}
coeff_variation <- function(x){ #prends en entrée un vecteur``
cv <- (sd(x)/mean(x))
return (cv)
}
hist(mirna)
library(ggplot2)
ggplot(data = mirna)
vecteur <- function (dataframe, id_colonne) {
tab <- dataframe$colonne
return (coeff_variation(tab))
}
vecteur_mirna <- function (mirna, id_colonne) {
tab <- dataframe$colonne
return (coeff_variation(tab))
}
vecteur_mirna
vecteur_mirna <- function (mirna, id_colonne) {
tab <- mirna$colonne
return (coeff_variation(tab))
}
vecteur_mirna <- function (mirna, id_colonne) {
vecteur <- mirna$colonne
return (coeff_variation(vecteur))
}
creer_vecteur <- function (mirna, id_colonne) {
vecteur <- mirna$colonne
return (coeff_variation(vecteur))
}
hist(mirna)
barplot(mirna)
x = c(mirna)
barplot(x)
hist(mirna[,])
hist(mirna[,2])
barplot(mirna[,])
barplot(mirna[,2])
hist(mirna[,2])
coeff_variation <- function(vector_sd, vector_mean){
cv <- c()  # vecteur
for (i in 1:length(vector_sd)) {
cv_tmp<-(vector_sd[i])/(vector_mean[i])
cv = c(cv,cv_tmp)
}
return(cv)
}
vector_mirna_sd<-colSds(as.matrix(mirna[sapply(mirna, is.numeric)]))
library(matrixStats)
vector_mirna_sd<-colSds(as.matrix(mirna[sapply(mirna, is.numeric)]))
vector_mrna_sd<-colSds(as.matrix(mrna[sapply(mrna, is.numeric)]))
vector_protein_sd<-colSds(as.matrix(protein[sapply(protein, is.numeric)]))
library(matrixStats)
vec_mirna_sd <- colSds(as.matrix(mirna[sapply(mirna, is.numeric)]))
vec_mrna_sd <- colSds(as.matrix(mrna[sapply(mrna, is.numeric)]))
vet_protein_sd <- colSds(as.matrix(protein[sapply(protein, is.numeric)]))
vec_mirna_mean <- colMeans(mirna)
vector_mirna_mean<-colMeans(mirna)
cv_mirna <- coeff_variation(vec_mirna_sd, vec_mirna_mean)
library(matrixStats)
vec_mirna_sd <- colSds(as.matrix(mirna[sapply(mirna, is.numeric)]))
vec_mrna_sd <- colSds(as.matrix(mrna[sapply(mrna, is.numeric)]))
vet_protein_sd <- colSds(as.matrix(protein[sapply(protein, is.numeric)]))
cv_mirna <- coeff_variation(vec_mirna_sd, vec_mirna_mean)
vector_mirna_mean<-colMeans(mirna)
hist(cv_mirna)
coeff_varia_mirna<-coeff_varia(vector_mirna_sd,vector_mirna_mean)
vector_mirna_mean<-colMeans(mirna)
vector_mirna_mean<-col$Means(mirna)
vector_mirna_mean<-col$means(mirna)
vector_mirna_mean<-col$mean(mirna)
mirna <- read.csv("mirna.csv", header = TRUE, sep = ",")
mrna <- read.csv("mrna.csv", header = TRUE, sep = ",")
protein <- read.csv("protein.csv", header = TRUE, sep = ",")
sample_group <- read.csv("sample_group.csv", header = TRUE, sep = ",")
dim(mirna)
dim(mrna)
dim(protein)
nrow(mirna)
nrow(mrna)
nrow(protein)
nrow(sample_group)
ncol(mirna)
ncol(mrna)
ncol(protein)
ncol(sample_group)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("mixOmics")
library(mixOmics)
mirna <- read.csv("mirna.csv", header = TRUE, sep = ",")
mrna <- read.csv("mrna.csv", header = TRUE, sep = ",")
protein <- read.csv("protein.csv", header = TRUE, sep = ",")
sample_group <- read.csv("sample_group.csv", header = TRUE, sep = ",")
dim(mirna)
dim(mrna)
dim(protein)
library(matrixStats)
coeff_variation <- function(dataset){
vec_sd <- colSds(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur ecart-type
vec_mean <- colMeans(dataset)   # vecteur moyenne
for (i in 1:length(vector_sd)) {
cv_tmp <- (vector_sd[i])/(vector_mean[i])
cv = c(cv,cv_tmp)
}
return(cv)
}
library(matrixStats)
coeff_variation <- function(dataset){
vec_sd <- colSds(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur ecart-type
vec_mean <- colMeans(dataset)   # vecteur moyenne
cv <- c()  # vecteur vide
for (i in 1:length(vector_sd)) {
cv_tmp <- (vector_sd[i])/(vector_mean[i])
cv = c(cv,cv_tmp)
}
return(cv)
}
library(matrixStats)
coeff_variation <- function(dataset){
vec_sd <- colSds(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur ecart-type
vec_mean <- colMeans(dataset)   # vecteur moyenne
cv <- c()  # vecteur vide
for (i in 1:length(vec_sd)) {
cv_tmp <- (vec_sd[i])/(vec_mean[i])
cv = c(cv,cv_tmp)
}
return(cv)
}
cv_mirna <- coeff_variation(mirna)
library(matrixStats)
coeff_variation <- function(dataset){
vec_sd <- colSds(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur ecart-type
vec_mean <- colMeans(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur moyenne
cv <- c()  # vecteur vide
for (i in 1:length(vec_sd)) {
cv_tmp <- (vec_sd[i])/(vec_mean[i])
cv = c(cv,cv_tmp)
}
return(cv)
}
cv_mirna <- coeff_variation(mirna)
cv_mrna <- coeff_variation(mrna)
cv_protein <- coeff_variation(protein)
cv_mirna
hist(cv_mirna)
hist(cv_mrna)
hist(cv_protein)
par(mfrow = c(1,2))
hist(cv_mirna)
hist(cv_mrna)
hist(cv_protein)
par(mfrow = c(2,2))
hist(cv_mirna)
hist(cv_mrna)
hist(cv_protein)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA' ")
hist(cv_mrna)
hist(cv_protein)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'")
hist(cv_mrna, main = "Distribution du dataset 'mRNA'")
hist(cv_protein, main = "Distribution du dataset 'protein'")
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'")
hist(cv_protein, main = "Distribution du dataset 'protein'")
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA)
dim(mirna)
dim(mrna)
dim(protein)
dim(mirna)
dim(mrna)
dim(protein)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 1000)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 100)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 100)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA, breaks = 100)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA, breaks = 100)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 50)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA, breaks = 100)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA, breaks = 100)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 50)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA, breaks = 50)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA, breaks = 50)
mirna_filtered <- mirna[,names(which(abs(apply(mirna, 2, cv)) >= 0.15))]
mirna_filtered <- mirna[,names(which(abs(apply(mirna, 2, cv_mirna )) >= 0.15))]
mirna_filtered <- mirna[,names(which(abs(apply(cv_mirna )) >= 0.15))]
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 20)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA, breaks = 50)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA, breaks = 50)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 20)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA, breaks = 20)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA, breaks = 20)
mirna_filtered <- mirna[abs(cv_mirna) >= 0.15)]
mirna_filtered <- mirna[abs(cv_mirna) >= 0.15]
mirna_filtered <- mirna[abs(cv_mirna) >= 0.15]
mrna_filtered <- mrna[abs(cv_mrna) >= 0.15]
prot_filtered <- protein[abs(cv_protein) >= 0.15]
lenght(mirna_filtered)
length(mirna_filtered)
dim(mirna_filtered)
length(mirna_filtered)
dim(mirna_filtered)
dim(mirna)
cat("Le nombre de variable du dataset 'mirna' passe de ", length(mirna), "à ", length(mirna_filtered))
length(mirna_filtered)
dim(mirna)
cat("Le nombre de variable du dataset 'mirna' :")
length(mirna), "à ", length(mirna_filtered))
cat("Le nombre de variable du dataset 'mirna' :")
#length(mirna), "à ", length(mirna_filtered))
print("Le nombre de variable du dataset 'mirna' :")
#length(mirna), "à ", length(mirna_filtered))
print("Le nombre de variable du dataset 'mirna' :")
length(mirna)
length(mirna_filtered)
print("Le nombre de variable du dataset 'mirna' :")
length(mirna) # non-filtré
length(mirna_filtered) # filtré
print("Le nombre de variable du dataset 'mrna' :")
length(mrna) # non-filtré
length(mrna_filtered) # filtré
print("Le nombre de variable du dataset 'mirna' :")
length(mirna) # non-filtré
length(mirna_filtered) # filtré
print("Le nombre de variable du dataset 'mrna' :")
length(mrna) # non-filtré
length(mrna_filtered) # filtré
print("Le nombre de variable du dataset 'protein' :")
length(protein) # non-filtré
length(protein_filtered) # filtré
print("Le nombre de variable du dataset 'mirna' :")
length(mirna) # non-filtré
length(mirna_filtered) # filtré
print("Le nombre de variable du dataset 'mrna' :")
length(mrna) # non-filtré
length(mrna_filtered) # filtré
print("Le nombre de variable du dataset 'protein' :")
length(protein) # non-filtré
length(prot_filtered) # filtré
dim(mirna)
dim(mrna)
dim(protein)
which.max(abs(cv_mirna))
which.max(abs(mirna_filtered))
which.max(abs(cv_mirna))
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("mixOmics")
library(mixOmics)
View(mirna)
View(mirna)
mirna <- read.csv("mirna.csv", header = TRUE, sep = ",", row.names = 1)
mrna <- read.csv("mrna.csv", header = TRUE, sep = ",")
protein <- read.csv("protein.csv", header = TRUE, sep = ",")
sample_group <- read.csv("sample_group.csv", header = TRUE, sep = ",")
View(mirna)
mirna <- read.csv("mirna.csv", header = TRUE, sep = ",", row.names = 1)
mrna <- read.csv("mrna.csv", header = TRUE, sep = ",", row.names = 1)
protein <- read.csv("protein.csv", header = TRUE, sep = ",", row.names = 1)
sample_group <- read.csv("sample_group.csv", header = TRUE, sep = ",", row.names = 1)
dim(mirna)
dim(mrna)
dim(protein)
library(matrixStats)
coeff_variation <- function(dataset){
vec_sd <- colSds(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur ecart-type
vec_mean <- colMeans(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur moyenne
cv <- c()  # vecteur vide
for (i in 1:length(vec_sd)) {
cv_tmp <- (vec_sd[i])/(vec_mean[i])
cv = c(cv,cv_tmp)
}
return(cv)
}
cv_mirna <- coeff_variation(mirna)
cv_mrna <- coeff_variation(mrna)
cv_protein <- coeff_variation(protein)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 20)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA, breaks = 20)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA, breaks = 20)
mirna_filtered <- mirna[abs(cv_mirna) >= 0.15]
mrna_filtered <- mrna[abs(cv_mrna) >= 0.15]
prot_filtered <- protein[abs(cv_protein) >= 0.15]
print("Le nombre de variable du dataset 'mirna' :")
length(mirna) # non-filtré
length(mirna_filtered) # filtré
print("Le nombre de variable du dataset 'mrna' :")
length(mrna) # non-filtré
length(mrna_filtered) # filtré
print("Le nombre de variable du dataset 'protein' :")
length(protein) # non-filtré
length(prot_filtered) # filtré
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("mixOmics")
library(mixOmics)
mirna <- read.csv("mirna.csv", header = TRUE, sep = ",", row.names = 1)
mrna <- read.csv("mrna.csv", header = TRUE, sep = ",", row.names = 1)
protein <- read.csv("protein.csv", header = TRUE, sep = ",", row.names = 1)
sample_group <- read.csv("sample_group.csv", header = TRUE, sep = ",", row.names = 1)
dim(mirna)
dim(mrna)
dim(protein)
library(matrixStats)
coeff_variation <- function(dataset){
vec_sd <- colSds(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur ecart-type
vec_mean <- colMeans(as.matrix(dataset[sapply(dataset, is.numeric)]))   # vecteur moyenne
cv <- c()  # vecteur vide
for (i in 1:length(vec_sd)) {
cv_tmp <- (vec_sd[i])/(vec_mean[i])
cv = c(cv,cv_tmp)
}
return(cv)
}
cv_mirna <- coeff_variation(mirna)
cv_mrna <- coeff_variation(mrna)
cv_protein <- coeff_variation(protein)
par(mfrow = c(2,2))
hist(cv_mirna, main = "Distribution du dataset 'miRNA'", xlab = NA, breaks = 20)
hist(cv_mrna, main = "Distribution du dataset 'mRNA'", xlab = NA, breaks = 20)
hist(cv_protein, main = "Distribution du dataset 'protein'", xlab = NA, breaks = 20)
mirna_filtered <- mirna[abs(cv_mirna) >= 0.15]
mrna_filtered <- mrna[abs(cv_mrna) >= 0.15]
prot_filtered <- protein[abs(cv_protein) >= 0.15]
print("Le nombre de variable du dataset 'mirna' :")
length(mirna) # non-filtré
length(mirna_filtered) # filtré
print("Le nombre de variable du dataset 'mrna' :")
length(mrna) # non-filtré
length(mrna_filtered) # filtré
print("Le nombre de variable du dataset 'protein' :")
length(protein) # non-filtré
length(prot_filtered) # filtré
which.max(abs(cv_mrna))
acp <- pca(mrna_filtered, scale = FALSE, center = TRUE, ncomp = 25)  # 25 est un nombre aléatoire assez grand pour voir un bon nombre de PCA
acp
barplot(acp$explained_variance)
acp2 <- pca(mrna_filtered, scale = TRUE, ncomp = 2)
acp2
plotVar(acp2, cex = 2)
col = as.factor(sample_group$Y)
plot(acp2$x, col = col, pch = 19, main = "Analyse en Composante Principale des mRNA", xlab = "PCA1(33,7%)", ylab = "PC2(23,3%)")
legend("topright", legend = c("Groupe 1", "Groupe 2", "Groupe 3"), fill = c(1,2,3), cex = 0.75)
spca <- spca(mrna_filtered, center = TRUE, scale = TRUE, ncomp = 2, keepX = c(10,5)) # 10 gènes et 5 gènes.
spca
plotVar(spca, cex = 3)
composante1 <- selectVar(spca, comp = 1)
composante2 <- selectVar(spca, comp = 2)
composante1[1]
composante2[1]
pls <- pls(X = mrna_filtered, Y = prot_filtered, ncomp = 3)
plotVar(pls, cex = c(2,2))
x_lim = c(20,20)
#y_lim = c(0,6)
plot(pls$x[,2],pls$x[,3], xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim)
x_lim = c(20,20)
y_lim = c(20,20)
plot(pls$x[,2],pls$x[,3], xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-20,20)
y_lim = c(-20,20)
plot(pls$x[,2],pls$x[,3], xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-200,200)
y_lim = c(-200,200)
plot(pls$x[,2],pls$x[,3], xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-200,200)
y_lim = c(-200,200)
plot(acp$x[,2],acp$x[,3], xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-20,20)
y_lim = c(-20,20)
plot(acp$x[,2],acp$x[,3], xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-20,20)
y_lim = c(-20,20)
plot(acp2$x[,2],acp2$x[,3], xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-20,20)
y_lim = c(-20,20)
plot(acp$x[,2],acp$x[,3], xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-20,20)
y_lim = c(-20,20)
plot(acp$x[,2],acp$x[,3], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-20,20)
y_lim = c(-20,20)
plot(acp$x[,1],acp$x[,2], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-20,20)
y_lim = c(-20,20)
plot(acp$x[,1],acp$x[,3], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-20,20)
y_lim = c(-20,20)
plot(acp$x[,2],acp$x[,3], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
x_lim = c(-15,15)
y_lim = c(-15,15)
plot(acp$x[,2],acp$x[,3], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
plotArrow(acp$x[,1],acp$x[,3], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col)
plotArrow(acp$x[,1],acp$x[,3]) #, main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col)
plotArrow(pls$x[,1],pls$x[,3]) #, main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col)
x_lim = c(-15,15)
y_lim = c(-15,15)
plot(acp$x[,2],acp$x[,3], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
legend("topright", legend = c("Groupe 1", "Groupe 2", "Groupe 3"), fill = c(1,2,3), cex = 0.75)
x_lim = c(-10,10)
y_lim = c(-10,10)
plot(acp$x[,2],acp$x[,3], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
legend("topright", legend = c("Groupe 1", "Groupe 2", "Groupe 3"), fill = c(1,2,3), cex = 0.75)
x_lim = c(-13,13)
y_lim = c(-13,13)
plot(acp$x[,2],acp$x[,3], main = "", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
legend("topright", legend = c("Groupe 1", "Groupe 2", "Groupe 3"), fill = c(1,2,3), cex = 0.75)
x_lim = c(-13,13)
y_lim = c(-13,13)
plot(acp$x[,2],acp$x[,3], main = "Analyses en Composantes Principales ...?", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
legend("topright", legend = c("Groupe 1", "Groupe 2", "Groupe 3"), fill = c(1,2,3), cex = 0.75)
x_lim = c(-13,13)
y_lim = c(-13,13)
plot(pls$x[,2],pls$x[,3], main = "Analyses en Composantes Principales ...?", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
legend("topright", legend = c("Groupe 1", "Groupe 2", "Groupe 3"), fill = c(1,2,3), cex = 0.75)
x_lim = c(-13,13)
y_lim = c(-13,13)
plot(acp$x[,2],acp$x[,3], main = "Analyses en Composantes Principales ...?", xlab = "PC2", ylab = "PC3", pch = 19, col = col, xlim = x_lim, ylim = y_lim)
legend("topright", legend = c("Groupe 1", "Groupe 2", "Groupe 3"), fill = c(1,2,3), cex = 0.75)
